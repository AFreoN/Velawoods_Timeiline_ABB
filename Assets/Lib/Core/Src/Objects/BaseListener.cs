using UnityEngine;using System.Collections;using System.Collections.Generic;namespace CoreLib{    public class BaseListener : MonoBehaviour    {        private List<GameObject> _stringListeners;        public delegate void EventCallback(object obj);        private Dictionary<string, List<EventCallback>> _events;        /// <summary>        /// Sends a event via a string method name to all objects add to the string listeners array.        /// </summary>        /// <param name="message">Message.</param>        /// <param name="to_send">To_send.</param>        protected virtual void SendStringEvent(string message, object to_send)        {            if (_stringListeners != null)            {                foreach (GameObject obj in _stringListeners)                {                    if (obj != null)                    {                        obj.SendMessage(message, to_send, SendMessageOptions.DontRequireReceiver);                    }                }            }        }        /// <summary>        /// Adds an Event callback to a event name.        ///         /// You can have multiple events to a event name.        ///         /// example Touched3DObject - event name        ///         /// TouchController adds a method to the event name        /// Also SomeWidget adds a method to the event name        ///         /// Both are triggered when the Method TriggerEvent is used        /// </summary>        /// <param name="eventName">Event name.</param>        /// <param name="callback">Callback.</param>        public void AddEvent(string eventName, EventCallback callback)        {            if (_events == null)                _events = new Dictionary<string, List<EventCallback>>();            if (!_events.ContainsKey(eventName))                _events[eventName] = new List<EventCallback>();            _events[eventName].Add(callback);        }        /// <summary>        /// Triggers all callbacks assigned to that event name.        /// </summary>        /// <param name="eventName">Event name.</param>        /// <param name="parameters">Parameters.</param>        public void TriggerEvent(string eventName, object parameters)        {            if (_events != null)            {                if (_events.ContainsKey(eventName))                {                    foreach (EventCallback cb in _events[eventName])                    {                        if (cb != null)                            cb(parameters);                    }                }            }        }        /// <summary>        /// Adds a gameobject.        ///         /// When the method SendStringEvent is used that string has to be overridden        /// by the given object as a method.         /// </summary>        /// <param name="obj">Object.</param>        public virtual void AddStringListener(GameObject obj)        {            if (_stringListeners == null) _stringListeners = new List<GameObject>();            _stringListeners.Add(obj);        }        /// <summary>        /// Removes the event and all its callbacks from the list.        /// </summary>        /// <param name="eventName">Event name.</param>        public void RemoveEvent(string eventName)        {            if (_events != null)            {                if (_events.ContainsKey(eventName))                {                    _events.Remove(eventName);                }            }        }        /// <summary>        /// Clears the event list. Like the remove method but         /// leaves the event in the list but empty.        /// </summary>        /// <param name="eventName">Event name.</param>        public void ClearEvent(string eventName)        {            if (_events != null)            {                if (_events.ContainsKey(eventName))                {                    _events[eventName].Clear();                }            }        }        /// <summary>        /// Clears all events from this listener        /// </summary>        public void ClearAllEvents()        {            if (_events != null)            {                _events.Clear();            }        }        /// <summary>        /// Removes a listener from receiving string events.        /// </summary>        /// <param name="to_remove">To_remove.</param>        public virtual void RemoveStringListener(GameObject to_remove)        {            if (_stringListeners != null)            {                int remove_idx = -1;                for (int i = 0; i < _stringListeners.Count; i++)                {                    GameObject obj = _stringListeners[i];                    if (to_remove.name == obj.name)                    {                        remove_idx = i;                        break;                    }                }                if (remove_idx > -1)                    _stringListeners.RemoveAt(remove_idx);            }        }        /// <summary>        /// Clears all the string listeners.        /// </summary>        public void ClearStringListeners()        {            if (_stringListeners != null)            {                _stringListeners.Clear();            }        }    }}