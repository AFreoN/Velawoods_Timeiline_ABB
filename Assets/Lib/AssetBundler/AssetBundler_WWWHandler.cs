using CoreLib;using UnityEngine;using System.Collections;using System.Collections.Generic;using System.Threading;public class AssetBundler_WWWHandler : MonoSingleton<AssetBundler_WWWHandler>{	private List<WWWInfo> _assetBundlerWWWs = new List<WWWInfo>();    // Dispose thread    private Thread _disposeThread;    private bool _threadRunning = false;    private Coroutine _threadDebugLogs = null;    private List<string> _debugLogs = new List<string>();    protected override void Init()    {        // Start the dispose thread        _disposeThread = new Thread(new ThreadStart(DisposeWWW));        _threadRunning = true;        _disposeThread.Start();        _threadDebugLogs = Core.Instance.StartCoroutine(DebugLog());        base.Init();        CoreEventSystem.Instance.AddListener(CoreEventTypes.ON_APPLICATION_QUIT, OnApplicationQuit);    }    protected override void Dispose()    {        CoreEventSystem.Instance.RemoveListener(CoreEventTypes.ON_APPLICATION_QUIT, OnApplicationQuit);        // Stop the dispose thread.        _threadRunning = false;        if (_threadDebugLogs != null)        {            Core.Instance.StopCoroutine(_threadDebugLogs);        }

        base.Dispose();    }    private void OnApplicationQuit(object param = null)    {        Dispose();    }    public void AddWWW(WWW newWWW)	{        if(newWWW.isDone)        {            string name = newWWW.url;            newWWW.Dispose();            newWWW = null;            Debug.Log("Disposing of WWW: " + name + "\nCurrent WWW count: " + _assetBundlerWWWs.Count);            System.GC.Collect();            return;        }        WWWInfo newInfo = new WWWInfo()		{			m_www = newWWW,			m_name = newWWW.url		};		_assetBundlerWWWs.Add(newInfo);		Debug.Log ("Adding new WWW: " + newInfo.m_name + "\nCurrent WWW count: " + _assetBundlerWWWs.Count);	}    private void DisposeWWW()    {        while(_threadRunning)        {            if (_assetBundlerWWWs == null || _assetBundlerWWWs.Count <= 0) continue;            string disposingName = _assetBundlerWWWs[0].m_name;            WWW disposingWWW = _assetBundlerWWWs[0].m_www;            disposingWWW.Dispose();            disposingWWW = null;            _assetBundlerWWWs.RemoveAt(0);            System.GC.Collect();            _debugLogs.Add("Disposing of WWW: " + disposingName + "\nCurrent WWW count: " + _assetBundlerWWWs.Count);        }    }    private IEnumerator DebugLog()    {        while(_threadRunning)        {            yield return null;            if (_debugLogs == null || _debugLogs.Count <= 0) continue;            Debug.Log(_debugLogs[0]);            _debugLogs.RemoveAt(0);        }    }	private struct WWWInfo	{		public WWW m_www;		public string m_name;	}}